<?xml version="1.0" encoding="UTF-8"?>

<?import com.jfoenix.controls.*?>
<?import javafx.geometry.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.*?>

<BorderPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="693.0" prefWidth="833.0" style="-fx-background-color: linear-gradient(to right top, #000428, #031a40, #062a5a, #073b75, #004e92);;" xmlns="http://javafx.com/javafx/10.0.2-internal" xmlns:fx="http://javafx.com/fxml/1" fx:controller="sample.AboutController">
   <top>
      <VBox prefHeight="54.0" prefWidth="672.0" BorderPane.alignment="CENTER">
         <children>
            <Label fx:id="AboutLabel" alignment="CENTER" prefHeight="51.0" prefWidth="834.0" text="About" textFill="#fafafa">
               <font>
                  <Font size="31.0" />
               </font>
            </Label>
            <Separator prefWidth="200.0" />
         </children>
      </VBox>
   </top>
   <center>
      <VBox prefHeight="605.0" prefWidth="834.0" BorderPane.alignment="CENTER">
         <children>
            <JFXTextArea fx:id="AboutTextArea" editable="false" focusColor="RED" prefHeight="606.0" prefWidth="834.0" style="-fx-text-fill: #fafafa;" text="This program is a combined version of question 3,4,and 5 of the OOM Assigment 2 with the mentioned functionalities along with some extra tweaks.&#10;&#10;Question 3 :&#10;Extension to question (1):&#10;3. In question 1:&#10;a) Allow the user to click to add vertices, &#10;b) Select and press a key to delete vertices, &#10;c) Drag to move vertices in the vertex mode. &#10;d) In a similar edge move, allow to draw edges by mouse, select and delete edges by a key. &#10;e) Use a suitable interface to add and alter edge costs. &#10;f) Display the graph. &#10;g) Show the output of the Dijkstra’s algorithm on queried source and goal on the graph itself.&#10;&#10;Question 4:&#10;4. In question 3, instead of showing the path by a line, animate a circle travelling on the output path to show the path. &#10;The animation should continuously restart itself. &#10;&#10;Question 5:&#10;5. In question 4, let the user choose the shape instead of a circle to be used for animation (give options of square, plus, cross and triangle). &#10;Also allow the user to animate a number of paths, each computed using Dijkstra’s algorithm as a query. &#10;Use inheritance to handle shapes. &#10;&#10;Note : This program is almost purely visual based with event history log. Also the graph coordinates are scaled due to high coordinate space of the program.                            &#9;&#9;&#9; &#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;-- By developer ">
               <padding>
                  <Insets left="10.0" right="10.0" />
               </padding>
               <font>
                  <Font size="15.0" />
               </font>
            </JFXTextArea>
            <Separator prefHeight="0.0" prefWidth="834.0" />
         </children>
      </VBox>
   </center>
   <bottom>
      <JFXButton fx:id="AboutDev" prefHeight="33.0" prefWidth="154.0" style="-fx-border-color: #fafafa;" text="About Developer" textFill="#fafafa" BorderPane.alignment="CENTER">
         <font>
            <Font size="15.0" />
         </font>
         <BorderPane.margin>
            <Insets bottom="15.0" left="580.0" top="10.0" />
         </BorderPane.margin>
      </JFXButton>
   </bottom>
</BorderPane>
